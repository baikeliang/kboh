{"version":3,"sources":["webpack:///./app/server.js?7fe7","webpack:///./app/browermock.js?4bb6"],"names":["app","use","publicPath","output","stats","colors","resolve","alias","HTML","content","store","__html","getState","req","res","memoryHistory","url","history","routes","location","error","redirectLocation","renderProps","status","send","message","redirect","pathname","search","listen","console","log","MockBrowser","global","window","createWindow","navigator"],"mappings":";;;;;;;;;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;AACA;;AACA;;AAEA;;AAEA;;;;;;AAIA,KAAMA,MAAM,wBAAZ,C,CArBA;;;AAuBAA,KAAIC,GAAJ,CAAQ,oCAAqB,qDAArB,EAA6C;AACnDC,eAAY,8BAAcC,MAAd,CAAqBD,UADkB;AAEnDE,UAAO;AACLC,aAAQ;AADH,IAF4C;AAKnDC,YAAS;AACHC,YAAO;AACHP,YAAK,8BAAcM,OAAd,CAAsBC,KAAtB,CAA4BP;AAD9B;AADJ;AAL0C,EAA7C,CAAR;;AAYA,KAAMQ,OAAO,SAAPA,IAAO;AAAA,OAAGC,OAAH,QAAGA,OAAH;AAAA,OAAYC,KAAZ,QAAYA,KAAZ;AAAA,UACX;AAAA;AAAA;AACE;AAAA;AAAA;AACE,8CAAK,IAAG,MAAR,EAAe,yBAAyB,EAAEC,QAAQF,OAAV,EAAxC,GADF;AAEE,8CAAK,IAAG,UAAR,GAFF;AAGE,iDAAQ,yBAAyB,EAAEE,qCAAmC,mCAAUD,MAAME,QAAN,EAAV,CAAnC,MAAF,EAAjC,GAHF;AAIE,iDAAQ,KAAI,YAAZ;AAJF;AADF,IADW;AAAA,EAAb;;AAWAZ,KAAIC,GAAJ,CAAQ,UAAUY,GAAV,EAAeC,GAAf,EAAoB;AAC1B,OAAMC,gBAAgB,sCAAoBF,IAAIG,GAAxB,CAAtB;AACA,OAAMN,QAAQ,oCAAeK,aAAf,CAAd;AACA,OAAME,UAAU,4CAAqBF,aAArB,EAAoCL,KAApC,CAAhB;;AAEA,2BAAM,EAAEO,gBAAF,EAAWC,wBAAX,EAAmBC,UAAUN,IAAIG,GAAjC,EAAN,EAA8C,UAACI,KAAD,EAAQC,gBAAR,EAA0BC,WAA1B,EAA0C;AACtF,SAAIF,KAAJ,EAAW;AACTN,WAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,MAAMK,OAA3B;AACD,MAFD,MAEO,IAAIJ,gBAAJ,EAAsB;AAC3BP,WAAIY,QAAJ,CAAa,GAAb,EAAkBL,iBAAiBM,QAAjB,GAA4BN,iBAAiBO,MAA/D;AACD,MAFM,MAEA,IAAIN,WAAJ,EAAiB;AACtB,WAAMb,UAAU,4BACd;AAAA;AAAA,WAAU,OAAOC,KAAjB;AACE,mEAAmBY,WAAnB;AADF,QADc,CAAhB;;AAMAR,WAAIU,IAAJ,CAAS,sBAAsB,4BAAe,8BAAC,IAAD,IAAM,SAASf,OAAf,EAAwB,OAAOC,KAA/B,GAAf,CAA/B;AACD;AACF,IAdD;AAeD,EApBD;;AAsBAV,KAAI6B,MAAJ,CAAW,IAAX,EAAiB,YAAY;AAC3BC,WAAQC,GAAR,CAAY,2DAAZ;AACD,EAFD,E;;;;;;;;;;;;ACpEA;;AAGA,EAAC,YAAU;;AAET,OAAIC,cAAc,mBAAMA,WAAxB;;AAEAC,UAAOC,MAAP,GAAgBF,YAAYG,YAAZ,EAAhB;;AAEAF,UAAOG,SAAP,GAAmBH,OAAOC,MAAP,CAAcE,SAAjC;;AAEAN,WAAQC,GAAR,CAAY,eAAZ;AAED,EAVD,I","file":"0.ced6ad87db78d904f695.hot-update.js","sourcesContent":["/*eslint-disable no-console */\nimport express from 'express'\nimport serialize from 'serialize-javascript'\nimport all from './browermock.js'\n\nimport webpack from 'webpack'\nimport webpackDevMiddleware from 'webpack-dev-middleware'\nimport webpackConfig from '../webpack.client.config.js'\n\nimport React from 'react'\nimport { renderToString } from 'react-dom/server'\nimport { Provider } from 'react-redux'\nimport { createMemoryHistory, match, RouterContext } from 'react-router'\nimport { syncHistoryWithStore } from 'react-router-redux'\n\nimport { configureStore } from './configure-store.js'\n\nimport routes from './routes'\n\n\n\nconst app = express()\n\napp.use(webpackDevMiddleware(webpack(webpackConfig), {\n  publicPath: webpackConfig.output.publicPath,\n  stats: {\n    colors: true\n  },\n  resolve: {\n        alias: {\n            app: webpackConfig.resolve.alias.app\n        }\n    }\n}))\n\nconst HTML = ({ content, store }) => (\n  <html>\n    <body>\n      <div id=\"root\" dangerouslySetInnerHTML={{ __html: content }}/>\n      <div id=\"devtools\"/>\n      <script dangerouslySetInnerHTML={{ __html: `window.__initialState__=${serialize(store.getState())};` }}/>\n      <script src=\"/bundle.js\"/>\n    </body>\n  </html>\n)\n\napp.use(function (req, res) {\n  const memoryHistory = createMemoryHistory(req.url)\n  const store = configureStore(memoryHistory)\n  const history = syncHistoryWithStore(memoryHistory, store)\n\n  match({ history, routes, location: req.url }, (error, redirectLocation, renderProps) => {\n    if (error) {\n      res.status(500).send(error.message)\n    } else if (redirectLocation) {\n      res.redirect(302, redirectLocation.pathname + redirectLocation.search)\n    } else if (renderProps) {\n      const content = renderToString(\n        <Provider store={store}>\n          <RouterContext {...renderProps}/>\n        </Provider>\n      )\n\n      res.send('<!doctype html>\\n' + renderToString(<HTML content={content} store={store}/>))\n    }\n  })\n})\n\napp.listen(3000, function () {\n  console.log('Server listening on http://localhost:3000, Ctrl+C to stop')\n})\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/server.js\n **/","import { mocks } from 'mock-browser'\n\n\n(function(){\n\n  var MockBrowser = mocks.MockBrowser\n\n  global.window = MockBrowser.createWindow()\n\n  global.navigator = global.window.navigator\n\n  console.log(\".............\");\n  \n})();\n\n\n/** WEBPACK FOOTER **\n ** ./app/browermock.js\n **/"],"sourceRoot":""}